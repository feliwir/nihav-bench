From 4aee71826e0c30b7ad87cb4acdb5c4d31a1507ab Mon Sep 17 00:00:00 2001
From: Stephan Vedder <stephan.vedder@gmail.com>
Date: Wed, 17 Nov 2021 20:28:46 +0100
Subject: [PATCH] Optimize bilinear motion correction

---
 nihav-duck/src/codecs/vp6.rs        |  2 +-
 nihav-duck/src/codecs/vp6dsp.rs     | 29 ++++++++++++++++++++---------
 nihav-duck/src/codecs/vp6enc/dsp.rs |  2 +-
 3 files changed, 22 insertions(+), 11 deletions(-)

diff --git a/nihav-duck/src/codecs/vp6.rs b/nihav-duck/src/codecs/vp6.rs
index 6d97189..d968454 100644
--- a/nihav-duck/src/codecs/vp6.rs
+++ b/nihav-duck/src/codecs/vp6.rs
@@ -351,7 +351,7 @@ impl VP56Parser for VP6BR {
             let coeff_v = &VP6_BICUBIC_COEFFS[self.filter_alpha][my as usize];
             mc_bicubic(dbuf, dstride, tmp_blk, 16 * 2 + 2, 16, coeff_h, coeff_v);
         } else {
-            mc_bilinear(dbuf, dstride, tmp_blk, 16 * 2 + 2, 16, mx as u16, my as u16);
+            mc_bilinear16(dbuf, dstride, tmp_blk, mx as u16, my as u16);
         }
     }
 }
diff --git a/nihav-duck/src/codecs/vp6dsp.rs b/nihav-duck/src/codecs/vp6dsp.rs
index dd62b86..04a8349 100644
--- a/nihav-duck/src/codecs/vp6dsp.rs
+++ b/nihav-duck/src/codecs/vp6dsp.rs
@@ -52,38 +52,49 @@ macro_rules! mc_filter {
 }
 
 //#[allow(snake_case)]
-pub fn mc_bilinear(dst: &mut [u8], dstride: usize, src: &[u8], mut soff: usize, sstride: usize, mx: u16, my: u16) {
+pub fn mc_bilinear<const SOFF: usize, const SSTRIDE: usize>(dst: &mut [u8], dstride: usize, src: &[u8], mx: u16, my: u16) {
+    let mut soff = SOFF;
+    assert!(dstride >= 8);
+        
     if my == 0 {
-        for dline in dst.chunks_mut(dstride).take(8) {
+        assert!(src.len() >= soff + SSTRIDE * 8);
+        for dline in dst.chunks_exact_mut(dstride).take(8) {
             for i in 0..8 {
                 dline[i] = mc_filter!(bilinear; src[soff + i], src[soff + i + 1], mx);
             }
-            soff += sstride;
+            soff += SSTRIDE;
         }
     } else if mx == 0 {
-        for dline in dst.chunks_mut(dstride).take(8) {
+        assert!(src.len() >= soff + SSTRIDE*8);
+        for dline in dst.chunks_exact_mut(dstride).take(8) {
             for i in 0..8 {
-                dline[i] = mc_filter!(bilinear; src[soff + i], src[soff + i + sstride], my);
+                dline[i] = mc_filter!(bilinear; src[soff + i], src[soff + i + SSTRIDE], my);
             }
-            soff += sstride;
+            soff += SSTRIDE;
         }
     } else {
         let mut tmp = [0u8; 8];
         for i in 0..8 {
             tmp[i] = mc_filter!(bilinear; src[soff + i], src[soff + i + 1], mx);
         }
-        soff += sstride;
-        for dline in dst.chunks_mut(dstride).take(8) {
+        soff += SSTRIDE;
+        
+        assert!(src.len() >= soff + SSTRIDE*8);
+        for dline in dst.chunks_exact_mut(dstride).take(8) {
             for i in 0..8 {
                 let cur = mc_filter!(bilinear; src[soff + i], src[soff + i + 1], mx);
                 dline[i] = mc_filter!(bilinear; tmp[i], cur, my);
                 tmp[i] = cur;
             }
-            soff += sstride;
+            soff += SSTRIDE;
         }
     }
 }
 
+pub fn mc_bilinear16(dst: &mut [u8], dstride: usize, src: &[u8], mx: u16, my: u16) {
+    mc_bilinear::<{16 * 2 + 2}, 16>(dst, dstride, src, mx, my)
+}
+
 #[allow(clippy::trivially_copy_pass_by_ref)]
 pub fn mc_bicubic(dst: &mut [u8], dstride: usize, src: &[u8], mut soff: usize, sstride: usize, coeffs_w: &[i16; 4], coeffs_h: &[i16; 4]) {
     if coeffs_h[1] == 128 {
diff --git a/nihav-duck/src/codecs/vp6enc/dsp.rs b/nihav-duck/src/codecs/vp6enc/dsp.rs
index 7421667..b8798ac 100644
--- a/nihav-duck/src/codecs/vp6enc/dsp.rs
+++ b/nihav-duck/src/codecs/vp6enc/dsp.rs
@@ -453,7 +453,7 @@ count2: 0,
             let coeff_v = &VP6_BICUBIC_COEFFS[self.filter_alpha][my as usize];
             mc_bicubic(dst, 8, tmp_blk, 16 * 2 + 2, 16, coeff_h, coeff_v);
         } else {
-            mc_bilinear(dst, 8, tmp_blk, 16 * 2 + 2, 16, mx as u16, my as u16);
+            mc_bilinear16(dst, 8, tmp_blk, mx as u16, my as u16);
         }
     }
     fn sad_mb(&mut self, cur_blk: &[[u8; 64]; 6], mb_x: usize, mb_y: usize, cur_mv: MV, best_dist: u32) -> u32 {
-- 
2.25.1

